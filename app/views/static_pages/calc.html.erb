<!DOCTYPE html>
<html>
<head>
  <title>Top 10 Questions to Ask Your Lender</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body class="popups">
<div id="header_popups">
	<h2 class="popups">Finance Calculator</h2>
</div>
<div class="calc_body">
<script type="text/JavaScript">

<!--
function FormatTemp(strTemp)
{
  strTemp = "(" + strTemp.substring(1) + ")";
  //alert(strTemp);
  return strTemp;
}


 function UpdateFiles()
     {
     objForm = window.document.calculator;
             
    var CapitalFund = getValue(objForm.txtCapitalFunds.value);    
    var BankFunding = getValue(objForm.txtBankFunding.value);
    var BankInterestRate = objForm.txtBankInterestRate.value;	
        BankInterestRate=BankInterestRate.substring(0,BankInterestRate.length-1);
        BankInterestRate=(Number(BankInterestRate)/100);
    var GrossMarginPercent = objForm.txtGrossMarginPercent.value;
    GrossMarginPercent = GrossMarginPercent.substring(0,GrossMarginPercent.length -1);
    GrossMarginPercent = (Number(GrossMarginPercent)/100);
	 var SuplimentalLendersRate=objForm.txtSuplimentalLendersRate.value;
	     SuplimentalLendersRate=SuplimentalLendersRate.substring(0,SuplimentalLendersRate.length-1)
		 SuplimentalLendersRate=(Number(SuplimentalLendersRate)/100)
   
    var AnnualOverHead = getValue(objForm.txtAnnualOverhead.value);
   
    var TradeCycle = Math.round(objForm.txtTradeCycle1.value);
   
    var BanksFund = getValue(objForm.txtBanksFund.value);
   
    var SuplementalFunds=getValue(objForm.txtBanksSuplementalFund.value);
   
    var SuplementalFundsRate =objForm.txtSuplimentalLendersRate.value;
        SuplementalFundsRate = SuplementalFundsRate.substring(0,SuplementalFundsRate.length -1);
        SuplementalFundsRate = (Number(SuplementalFundsRate)/100);
   var AdditionalAval= getValue(objForm.txtBanksSuplementalFund.value)+getValue(objForm.txtBanksFund.value)-getValue(objForm.txtBankFunding.value);
   
   if(AdditionalAval<0)
   {
   objForm.txtAdditionAval.value=FormatTemp(formatCurrency(AdditionalAval));
   }
   else
   {
   objForm.txtAdditionAval.value=formatCurrency(AdditionalAval);
   }
   
	var AddtionalSales=AdditionalAval*(360/TradeCycle);
	if(AddtionalSales<0)
	{
	objForm.txtAdditionalSales.value=FormatTemp(formatCurrency(Math.round(AddtionalSales)));
	}
	else
	{
	objForm.txtAdditionalSales.value=formatCurrency(Math.round(AddtionalSales));
	}
	
	
	 var TransGrossProfit=AddtionalSales*Number(GrossMarginPercent);
	 if(TransGrossProfit<0)
	 {
	  objForm.txtTransGrossProfit.value=FormatTemp(formatCurrency(Math.round(TransGrossProfit)));
	 }
	 else
	 {
	 objForm.txtTransGrossProfit.value=formatCurrency(Math.round(TransGrossProfit));
	 }
	 
	 
	 var InterestOf=-(getValue(objForm.txtBanksSuplementalFund.value))*SuplimentalLendersRate-(getValue(objForm.txtBanksFund.value))*BankInterestRate+(getValue(objForm.txtBankFunding.value))*BankInterestRate;
	 
	 if(InterestOf<=0)
	 {
		objForm.txtInterestOf.value=FormatTemp(formatCurrency(Math.round(InterestOf)));
	 }	
	else
		objForm.txtInterestOf.value=formatCurrency(Math.round(InterestOf));
	// var AdditionalNetProfit=TransGrossProfit+InterestOf;
	// objForm.txtAdditionalNetProfit.value=AdditionalNetProfit;
    
	
     var EstimatedNetProfit=0;
     var TotalAmount=Number(CapitalFund) + Number(BankFunding);
     var TotalAmountForAllCycles=(360/TradeCycle )*(TotalAmount);
     var Gross=TotalAmountForAllCycles/(1- Number(GrossMarginPercent));
         EstimatedNetProfit = ((((360/TradeCycle )*(Number(CapitalFund) + Number(BankFunding))))* Number(GrossMarginPercent)) - (Number(AnnualOverHead))-(Number(BankFunding) * Number(BankInterestRate));
		
		   
		// EstimatedNetProfit=AdditionalNetProfit+( GrossProfit - AnnualExpence - InterestCost;);
       if (!(isNaN(EstimatedNetProfit)) && EstimatedNetProfit != "Infinity")
           {
             if (EstimatedNetProfit < 0)
              objForm.txtEstimatedNetProfit.value = FormatTemp(formatCurrency(Math.round(EstimatedNetProfit)));
              else                   
               objForm.txtEstimatedNetProfit.value = formatCurrency(Math.round(EstimatedNetProfit));            
     	   }	
          else    
          {
            objForm.txtEstimatedNetProfit.value = "0";                                                  
          }
       /* EstimatedNewNetProfit = ((360/TradeCycle )* (Number(CapitalFund) + Number(BanksFund) + Number(SuplementalFunds)) * Number(GrossMarginPercent) - (Number(AnnualOverHead)) - (Number(BanksFund) * Number(BankInterestRate)) - (Number(SuplementalFunds) * Number(SuplementalFundsRate)));*/
	  
         TotalResources =  (CapitalFund + BankFunding);
         objForm.txtTotalResources.value = formatCurrency(Number(TotalResources));
         
         TradeCycle2 = TradeCycle;
         objForm.txtTradeCycle2.value = TradeCycle2;
         AvailableCash = 360/TradeCycle2;
		 
         if (!(isNaN(AvailableCash)) && AvailableCash != "Infinity")
         {
         objForm.txtOverallAvlblCash.value = Math.round(AvailableCash);
		 objForm.txtAdditionalFunds.value = Math.round(AvailableCash);
         }
         else
         {
         objForm.txtOverallAvlblCash.value = "0";
		 objForm.txtAdditionalFunds.value =  "0";
         }
         TotalSales = Number(TotalResources * AvailableCash);
         var a=1- Number(GrossMarginPercent);

		 
         TotalSales = getValue(TotalSales);
         if (!(isNaN(TotalSales)) && TotalSales != "Infinity")
         {
           if (TotalSales < 0)
                  objForm.txtTotalSales.value = FormatTemp(formatCurrency(Math.round(TotalSales)));
               else     
                  objForm.txtTotalSales.value = formatCurrency(Math.round(TotalSales));
         }
         else
         {
         objForm.txtTotalSales.value = "0";
         }
         
         GrossMargin = GrossMarginPercent;
         objForm.txtGrossMargin.value = GrossMargin*100;
         GrossProfit = Number(TotalSales * GrossMargin);
         objForm.txtGrossProfit.value = formatCurrency(Math.round(GrossProfit));
         AnnualExpence = -AnnualOverHead;
			
		 if(AnnualExpence <= 0)	
         objForm.txtAnnualExpence.value = FormatTemp(formatCurrency(Math.round(AnnualExpence)));
		 else
         objForm.txtAnnualExpence.value = formatCurrency(Math.round(AnnualExpence));

         InterestCost =Number(-BankFunding * BankInterestRate);
		 
		 if(InterestCost <= 0)
         objForm.txtInterestCost.value = FormatTemp(formatCurrency(Math.round(InterestCost)));
		 else
         objForm.txtInterestCost.value = formatCurrency(Math.round(InterestCost));

         NetProfit = Number(GrossProfit + AnnualExpence + InterestCost);
		 
		 if(NetProfit < 0)
         objForm.txtNetProfit.value = FormatTemp(formatCurrency(Math.round(NetProfit)));
		 else
         objForm.txtNetProfit.value = formatCurrency(Math.round(NetProfit));
		 
		 
		 
         SupplimentalLendersProvider = SuplementalFunds;
        // objForm.txtSuplimentalLendersProvider.value =  formatCurrency(SupplimentalLendersProvider);
         SalesGenerate = Math.round((Number(CapitalFund) + Number(BanksFund) + Number(SuplementalFunds)) * 360/ Number(TradeCycle));
         SalesGenerate =getValue(SalesGenerate);
		  
		 
       /*  if (!(isNaN(SalesGenerate)) && SalesGenerate != "Infinity")
         {
          if (SalesGenerate < 0)
                   objForm.txtSalesGenerate.value = FormatTemp(formatCurrency(SalesGenerate));
               else     
                   objForm.txtSalesGenerate.value = formatCurrency(SalesGenerate);
         }
         else
         {
           objForm.txtSalesGenerate.value ="";
         }
       */
      GrossMarginwithGrossProfit = Math.round(SalesGenerate * GrossMarginPercent);
         //objForm.txtGrossMarginwithGrossProfit.value = formatCurrency(GrossMarginwithGrossProfit);
         InterestCosting = Math.round(Number(BankFunding) * Number(BankInterestRate));
       /*  if(InterestCosting < 0)
                objForm.txtInterestCosting.value = FormatTemp(formatCurrency(InterestCosting));
             else
             objForm.txtInterestCosting.value = formatCurrency(InterestCosting);*/
         PresentCost = Math.round(Number(BanksFund) * Number(BankInterestRate) + Number(SuplementalFunds) * Number(SuplementalFundsRate));
          /* if(PresentCost <0 )
                 objForm.txtInterestPresentCost.value = FormatTemp(formatCurrency(PresentCost));
                 else
                  objForm.txtInterestPresentCost.value = formatCurrency(PresentCost);*/
         InterestExtraCost =  PresentCost - InterestCosting;
        /* if (InterestExtraCost <0)
                 objForm.txtInterestExtraCost.value = FormatTemp(formatCurrency(InterestExtraCost));
                 else
                 objForm.txtInterestExtraCost.value =formatCurrency(InterestExtraCost); */
         SalesExtraCost = Number(SalesGenerate) - Number(TotalSales);
       /*  if (SalesExtraCost < 0)
               objForm.txtExtraSalesCreated.value = FormatTemp(formatCurrency(SalesExtraCost));
               else
               objForm.txtExtraSalesCreated.value = formatCurrency(SalesExtraCost);*/
        // AdditionalNetProfit =Math.round(SalesExtraCost * GrossMarginPercent - InterestExtraCost);
		 var AdditionalNetProfit=(AddtionalSales*Number(GrossMarginPercent))-((getValue(objForm.txtBanksSuplementalFund.value)*SuplimentalLendersRate)+(getValue(objForm.txtBanksFund.value)*BankInterestRate)-(getValue(objForm.txtBankFunding.value) *BankInterestRate));
	     
	       if(AdditionalNetProfit < 0)
                 objForm.txtAdditionalNetProfit.value = FormatTemp(formatCurrency(Math.round(AdditionalNetProfit)));
                 else
               objForm.txtAdditionalNetProfit.value = formatCurrency(Math.round(AdditionalNetProfit));
			   
			   
			   
		AdditionalNetProfit = 	TransGrossProfit + InterestOf;		   
	       if(AdditionalNetProfit < 0)
                 objForm.txtAdditionalNetProfit.value = FormatTemp(formatCurrency(Math.round(AdditionalNetProfit)));
                 else
               objForm.txtAdditionalNetProfit.value = formatCurrency(Math.round(AdditionalNetProfit));   
			   
	  var ToalNewNetProfit = AdditionalNetProfit+NetProfit;
	  //( GrossProfit - AnnualExpence - InterestCost);
		    if (!(isNaN(ToalNewNetProfit)) && ToalNewNetProfit != "Infinity")
         {
            if (ToalNewNetProfit < 0)            
                  objForm.txtTotalNewNetProfit.value = FormatTemp(formatCurrency(Math.round(ToalNewNetProfit)));
               else                             
                  objForm.txtTotalNewNetProfit.value = formatCurrency(Math.round(ToalNewNetProfit));
         }
         else
         {
          objForm.txtTotalNewNetProfit.value =  "0";
         }
	  
			   
      var  EstimatedNewNetProfit = AdditionalNetProfit+NetProfit;
	  //  ToalNewNetProfit
	  //  AdditionalNetProfit+( GrossProfit - AnnualExpence - InterestCost);
          if (!(isNaN(EstimatedNewNetProfit)) && EstimatedNewNetProfit != "Infinity")
         {
           if (EstimatedNewNetProfit < 0)
                   objForm.txtEstdNewNetProfit.value = FormatTemp(formatCurrency(Math.round(EstimatedNewNetProfit)));
               else     
                 objForm.txtEstdNewNetProfit.value = formatCurrency(Math.round(EstimatedNewNetProfit));
         }
         else
         {
            objForm.txtEstdNewNetProfit.value = "0";
         }
		 if(objForm.txtTotalResources.value=="")
         {
         objForm.txtTotalResources.value=="0";
         }
      		
}
    
                
    function formatCurrency(num)
     {
	        if (num=="")
            return "";
            num = num.toString().replace(/\$|\,/g,'');
            if(isNaN(num))
            num = "0";
            sign = (num == (num = Math.abs(num)));
            num = Math.floor(num*100+0.50000000001);
            cents = num%100;
            num = Math.floor(num/100).toString();
            if(cents<10)
            cents = "0" + cents;
            for (var i = 0; i < Math.floor((num.length-(1+i))/3); i++)
            num = num.substring(0,num.length-(4*i+3))+','+
            num.substring(num.length-(4*i+3));
           // return (((sign)?'':'-') +  num + '.' + cents);
            return ((sign)?'':'-') +  num;
    }
    
   /* function Left(str, n)
	{
	     if (n <= 0)
	      return "";
	     else if (n > String(str).length)
	       return str;
	     else
	    return String(str).substring(0,n);
    }

    function Right(str, n)
	  {
        if (n <= 0)
          return "";
       else if (n > String(str).length)
          return str;
        else
		{
          var iLen = String(str).length;
          return String(str).substring(iLen, iLen - n);
        }
    }*/

  function getDecimal(num)
  {
	 if(num=="")
      return "";
	  // if (num.indexOf('%')  != -1) 
	  // {
         //alert(num);
	  // }
	 // if (num.indexOf('%')  != -1) 
		//{
			//var numLeft = Left(num,num.indexOf('%'))
			//if (num.length != num.indexOf('%'))
		//	{
				//	var numRight=Right(num,num.indexOf('%'))
				//	var numResult=numLeft+numRight;
			//}
		//	else
			//	numResult=numLeft
		
				//return numResult;
			//num.replaceAt(num,"%",num.indexOf('%'),"");
			//alert(num)
		//}
		//if(num=='.'||num=='%')
		//{
		//	s
		//}
		
		str = replaceAll(num, ".", "");
		str = replaceAll(num, "%", "");
		
		if(isNaN(str))
		  num = "0";
	   	if(num.indexOf('%')!=-1)
		{
			num=num.substring(0,num.length-1);
		}
		
       if (num.indexOf('.') == -1) 
       {
           num=num + '.00';
      } 
	  
	  if (num.indexOf('%') == -1)         
         return num + '%'; 
      else 
         return num;
	
     
  }    
            

function replaceAll( str, from, to ) {
    var idx = str.indexOf( from );


    while ( idx > -1 ) {
        str = str.replace( from, to ); 
        idx = str.indexOf( from );
    }

    return str;
}
            

    function getValue(num)
    {
        if (num=="")
           return "";
        var noJunk = ""
        var withDollar = ""
        var foundDecimal = 0
        var foundAlphaChar = 0
        num += "";

        if (num == "") { return(0); }
        for (i=0; i <= num.length; i++)
        {
            var thisChar = num.substring(i, i+1);
            if (thisChar == ".")
            {
              foundDecimal = 1;
              noJunk = noJunk + thisChar;
            }
            if ((thisChar < "0") || (thisChar > "9"))
            {
              if ((thisChar != "$") && (thisChar !=".") && (thisChar != ",") && (thisChar != " ") && (thisChar !="")) foundAlphaChar = 1;
            }
            else 
             {
                withDollar = withDollar + thisChar
                noJunk = noJunk + thisChar
             }

             if ((thisChar == "$") || (thisChar == ".") || (thisChar == ","))
             {
               withDollar = withDollar + thisChar
             }
         }
         if (foundDecimal) { return parseFloat(noJunk); }
         else if (noJunk.length > 0) { return parseFloat(noJunk); }
         else return 0;
}

function setTextFocus()
{
   objForm = window.document.calculator;
   objForm.txtCapitalFunds.focus();
   objForm.txtCapitalFunds.value = formatCurrency(500000);
   objForm.txtBankFunding.value = formatCurrency(1250000);
   objForm.txtBankInterestRate.value = "9.00%";
       objForm.txtGrossMarginPercent.value = "20.00%";
   objForm.txtAnnualOverhead.value = formatCurrency(1500000);
   objForm.txtTradeCycle1.value = formatCurrency(90);
   objForm.txtBanksFund.value = "1,250,000";
   objForm.txtBanksSuplementalFund.value = formatCurrency(250000);
   objForm.txtSuplimentalLendersRate.value = "12.00%";
  
  theform = document.forms[0]; 
  
//  for(i=0;i<theform.length;i++)
//  {
//     if(theform.elements[i].type == "text")
//      {
//         document.forms[0].elements[i].style.backgroundColor="#ffffff";
//         if (theform.elements[i].id != "txtCapitalFunds" && theform.elements[i].id!='txtBankFunding' && theform.elements[i].id!='txtBankInterestRate' && theform.elements[i].id!='txtGrossMarginPercent' && theform.elements[i].id!='txtAnnualOverhead' && theform.elements[i].id!='txtTradeCycle1' && theform.elements[i].id!='txtBanksFund' && theform.elements[i].id!='txtBanksSuplementalFund' && theform.elements[i].id!='txtSuplimentalLendersRate') 
//          {
//           document.forms[0].elements[i].style.border=2;
//           document.forms[0].elements[i].style.fontWeight="Bold"
//           document.forms[0].elements[i].style.color="Blue"
//           }
//           else
//           {
//           document.forms[0].elements[i].style.fontWeight="Bold"
//           document.forms[0].elements[i].style.color="Black"
//           }
//           
//       }          
//   }
 }
    //document.getElementById('txtCapitalFunds').style.font="verdana";
   //  document.getElementById('txtCapitalFunds').style.fontSize="12px" 
     // document.getElementById('txtCapitalFunds').style.fontWeight="Bold"; 


//-->

function ClearFields()
{
//Editable Fields
objForm = window.document.calculator;
objForm.txtCapitalFunds.focus();
objForm.txtCapitalFunds.value="0";
objForm.txtBankFunding.value="0";
objForm.txtBankInterestRate.value="0.00%";
objForm.txtGrossMarginPercent.value="0.00%";
objForm.txtAnnualOverhead.value="0";
objForm.txtTradeCycle1.value="0";
objForm.txtBanksFund.value="0";
objForm.txtBanksSuplementalFund.value="0";
objForm.txtSuplimentalLendersRate.value="0.00%";
//Non - Editable Fields
objForm.txtEstimatedNetProfit.value="0";
objForm.txtTotalResources.value="0";
objForm.txtTradeCycle2.value="0";
objForm.txtOverallAvlblCash.value="0";
objForm.txtGrossMargin.value="0";
objForm.txtTotalSales.value="0";
objForm.txtGrossProfit.value="0";
objForm.txtAnnualExpence.value="(0)";
objForm.txtInterestCost.value="(0)";
objForm.txtNetProfit.value="0";
objForm.txtEstdNewNetProfit.value="0";
objForm.txtAdditionAval.value="0";
objForm.txtAdditionalFunds.value="0";
objForm.txtAdditionalSales.value="0";
objForm.txtTransGrossProfit.value="0";
objForm.txtInterestOf.value="(0)";
objForm.txtAdditionalNetProfit.value="0";
objForm.txtTotalNewNetProfit.value="0";
}

</script>
<style type="text/css">
<!--
.style5 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px;}
.style10 {font-family: Verdana, Arial, Helvetica, sans-serif}
.style11 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; }
a:focus { 
	outline: none;
}
-->
</style>
</head>

<body onload=";setTextFocus();UpdateFiles()">
<h4>the true cost of borrowing</h4>  
<p>So often, entrepreneurs and their advisors look only at the interest rate to determine the cost of borrowing. What they really should be looking at is the benefit to the company of that borrowing.   In making comparisons between lenders, if ALL ELSE is identical, then of course choose the lender offering the lower rate. But, if you have a line of credit from a bank, you may be able to get a higher return by replacing or supplementing the bank line with a line from another lender, even at higher rates. To test the impact, we have devised the calculator below. Fill in the yellow boxes to see how the additional resources can make an impact.</p>
<hr/>
  <tr>
    <td height="1072" valign="top"><table class="calcBox" border="0" cellpadding="0" cellspacing="0" width="100%">
      <tbody>
        <tr>
          <td align="left"><form id="calculator" name="calculator" method="post" action="">
            <table border="0" cellpadding="4" cellspacing="0">
              <tbody>
                <tr>
                  <td align="left" width="450"><table cellpadding="0" cellspacing="0">
                    <tbody>
                      <tr>
                        <td height="18" width="593"><span class="style5">Own funds (capital) in the business plus any trade payable and other available    credit</span></td>
                            </tr>
                      </tbody>
                    </table></td>
                      <td align="left" width="91"><input id="txtCapitalFunds" size="10" onclick="this.value=getValue(this.value)" onblur="this.value=formatCurrency(this.value);UpdateFiles();" tabindex="1" type="text" /></td>
                    </tr>
                <tr>
                  <td align="left" width="350"><span class="style5">Bank Funding</span></td>
                      <td align="left" width="91"><input id="txtBankFunding" size="10" onclick="this.value=getValue(this.value)" onblur="this.value=formatCurrency(this.value);UpdateFiles();" tabindex="2" type="text" /></td>
                    </tr>
                <tr>
                  <td width="350" align="left" class="style5">Bank Interest Rate</td>
                      <td align="left" width="91"><input id="txtBankInterestRate" size="10" onblur="this.value=getDecimal(this.value);UpdateFiles()" tabindex="3" type="text" /></td>
                    </tr>
                <tr>
                  <td align="left" width="350"><span class="style5"> Gross Margin Percentage</span></td>
                      <td align="left" width="91"><input id="txtGrossMarginPercent" size="10" onblur="this.value=getDecimal(this.value);UpdateFiles()" tabindex="4" type="text" /></td>
                    </tr>
                <tr>
                  <td align="left" width="350"><span class="style5"> Annual Overhead</span></td>
                      <td align="left" width="91"><input id="txtAnnualOverhead" size="10" onclick="this.value=getValue(this.value)" onblur="this.value=formatCurrency(this.value);UpdateFiles();" tabindex="5" type="text" /></td>
                    </tr>
                <tr>
                  <td align="left" width="350"><span class="style5">Trade Cycle in days *</span></td>
                      <td align="left" width="91"><input id="txtTradeCycle1" size="10" onblur="this.value=formatCurrency(this.value);UpdateFiles();" tabindex="6" type="text" /></td>
                    </tr>
                <tr>
                  <td align="left" width="350"><span class="style5">Estimated Net Profit</span></td>
                      <td align="left" width="91"><input name="Input3" class="calcNet" id="txtEstimatedNetProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" size="10" readonly="readOnly" tabindex="7" /></td>
                    </tr>
                </tbody>
              </table>
                <br />
            <table>
              <tbody>
                <tr>
                  <td><span class="SpanTextMessage style10">* - how many days from   paying your supplier until you get paid for the sale.</span></td>
                    </tr>
                </tbody>
              </table>
                <br />
            <table cellpadding="4" cellspacing="0">
              <tbody>
                <tr>
                  <td align="left" width="459"><span class="style5">It&#8217;s really very simple. With existing funding, total resources are </span></td>
                      <td align="right" width="75"><input name="Input2" class="calcSum" id="txtTotalResources" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="1,750,000" size="10" readonly="readOnly" tabindex="11" />                      </td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">With a trade cycle of </td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtTradeCycle2" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="90" size="10" readonly="readOnly" tabindex="12" /></td>
                      <td width="120" align="left" class="style5">days</td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">Funds can be turned </td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtOverallAvlblCash" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="4" size="10" readonly="readOnly" tabindex="13" /></td>
                      <td align="left" class="style5">times per year </td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">At a gross   of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtGrossMargin" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="20" size="10" readonly="readOnly" tabindex="14" /></td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5" style="height: 30px;">Sales of</td>
                      <td style="height: 30px;" align="right"><input name="Input2" class="calcSum" id="txtTotalSales" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="8,750,000" size="10" readonly="readOnly" tabindex="15" /></td>
                      <td align="left" class="style5">could be generated </td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">Gross Profit would be</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtGrossProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="1,750,000" size="10" readonly="readOnly" tabindex="16" /></td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">Less Expenses of </td>
                      <td align="right"><input name="Input22" class="calcSum" id="txtAnnualExpence" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="(1,500,000)" size="10" readonly="readOnly" tabindex="17" /></td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">And less interest of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtInterestCost" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="(112,500)" size="10" readonly="readOnly" tabindex="18" /></td>
                    </tr>
                <tr>
                  <td width="459" align="left" class="style5">Net profit will be</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtNetProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="137,500" size="10" readonly="readOnly" tabindex="19" /></td>
                    </tr>
                </tbody>
              </table>
                <br />
            <table border="0" cellpadding="4" cellspacing="0" width="100%">
              <tbody>
                <tr>
                  <td class="supText" align="left"><p class="style5">Now, assume a lender either replaces the bank with a bigger line or provides a supplemental line to the bank</p></td>
                    </tr>
                </tbody>
              </table>
                <br />
            <table cellpadding="4" cellspacing="0" width="685">
              <tbody>
                <tr>
                  <td width="290" align="left" class="style5"><span class="style10"><strong>Banks Fund</strong></span></td>
                      <td align="left" width="118"><input name="Input" id="txtBanksFund" onblur="this.value=formatCurrency(this.value);UpdateFiles();" onclick="this.value=getValue(this.value)" value="-" size="10" tabindex="8" /></td>
                      <td width="117" align="left" class="style5">and supplemental <br />
                        funds of</td>
                      <td align="left" width="90"><input name="Input" id="txtBanksSuplementalFund" onblur="this.value=formatCurrency(this.value);UpdateFiles();" onclick="this.value=getValue(this.value)" value="" size="10" tabindex="9" />                      </td>
                    </tr>
                <tr>
                  <td width="266" align="left" class="style5"><span class="style10"><strong>Supplemental lenders rate</strong></span></td>
                      <td align="left"><input id="txtSuplimentalLendersRate" size="10" onblur="this.value=getDecimal(this.value);UpdateFiles()" tabindex="9" type="text" /></td>
                      <td></td>
                      <td align="left">&nbsp;</td>
                    </tr>
                <tr>
                  <td align="left" class="style5"><span class="style10"><strong>Estimated New Net Profit</strong></span></td>
                      <td align="left"><input name="Input" id="txtEstdNewNetProfit" class="calcSum" size="10" onblur="this.value=formatCurrency(this.value);UpdateFiles()" tabindex="10" type="text" /></td>
                      <td></td>
                      <td align="right">&nbsp;</td>
                    </tr>
                <tr>
                  <td></td>
                    </tr>
                </tbody>
              </table>
                <br />
            <table cellpadding="4" cellspacing="0">
              <!-- <tr>
                        <td align="left" width="462">Now, with the supplemental lender   providing</td>
                        <td width="74" align="right"><input name="Input2" class="calcSum" id="txtSuplimentalLendersProvider" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="250,000" size="12" readonly="readOnly" /></td>
                      </tr>-->
              <tbody>
                <tr>
                  <td width="462" align="left" class="style5">Under the new funding arrangement, additional availibility is</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtAdditionAval" onblur="this.value=formatCurrency(this.value);UpdateFiles();" size="10" readonly="readOnly" value="250,000" tabindex="20" /></td>
                    </tr>
                <tr>
                  <td width="462" align="left" class="style5">On the same trade cycle the additional funds can be turned</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtAdditionalFunds" size="10" readonly="readOnly" value="4" tabindex="21" /></td>
                      <td width="100" align="left" class="style5">times per year</td>
                    </tr>
                <tr>
                  <td width="462" align="left" class="style5">Which could result in additional sales of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtAdditionalSales" onblur="this.value=formatCurrency(this.value); UpdateFiles();" size="10" readonly="readOnly" value="1,250,000" tabindex="22" /></td>
                    </tr>
                <tr>
                  <td width="462" align="left" class="style5">Which translates into gross profit of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtTransGrossProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="250,000" size="10" readonly="readOnly" tabindex="23" /></td>
                    </tr>
                <tr>
                  <td width="462" align="left" class="style5">Assumimg the same expense base the only additional cost is extra interest of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtInterestOf" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="(30,000)" size="10" readonly="readOnly" tabindex="24" /></td>
                    </tr>
                <!--  <tr>
                        <td align="left" width="417">You will be able to generate Sales   of</td>
                        <td align="right"><input name="Input24" class="calcSum" id="txtSalesGenerate" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="2,000,000" size="12" readonly="readOnly" /></td>
                      </tr>
                      <tr>
                        <td align="left" width="417">At the same Gross Margin, you will   now generate Gross Profits of</td>
                        <td align="right"><input name="Input2" class="calcSum" id="txtGrossMarginwithGrossProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="1,000,000" size="12" readonly="readOnly" /></td>
                      </tr>
                      <tr>
                        <td align="left" width="417">And, instead of Interest costing   you</td>
                        <td align="right"><input name="Input22" class="calcSum" id="txtInterestCosting" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="9,250" size="12" readonly="readOnly" /></td>
                      </tr>
                      <tr>
                        <td align="left" width="417">It will now cost</td>
                        <td align="right"><input name="Input2" class="calcSum" id="txtInterestPresentCost" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="30,000" size="12" readonly="readOnly" /></td>
                      </tr>
                    <tr>
                        <td align="left" width="417">An extra cost of</td>
                        <td align="right"><input name="Input2" class="calcSum" id="txtInterestExtraCost" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="20,750" size="12" readonly="readOnly" /></td>
                      </tr>
                      <tr>
                        <td align="left" width="417">But, this creates extra Sales   of</td>
                        <td align="right"><input name="Input2" class="calcSum" id="txtExtraSalesCreated" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="600,000" size="12" readonly="readOnly" /></td>
                      </tr>-->
                <tr>
                  <td width="462" align="left" class="style5">Yielding additional net profit of</td>
                      <td align="right"><input name="Input2" class="calcSum" id="txtAdditionalNetProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="220,000" size="10" readonly="readOnly" tabindex="25" /></td>
                    </tr>
                </tbody>
              </table>
                <table cellpadding="4" cellspacing="0">
                  <tbody>
                    <tr>
                      <td width="462" align="left" class="style5">For a new total net profit of</td>
                      <td align="right" width="74"><input name="Input2" class="calcSumTotal" id="txtTotalNewNetProfit" onblur="this.value=formatCurrency(this.value);UpdateFiles();" value="357,500" size="10" readonly="readOnly" tabindex="26" /></td>
                    </tr>
                  </tbody>
                </table>
            </form></td>
          </tr>
        <tr>
          <td align="left" height="20"></td>
          </tr>
        <tr>
          <td height="30" align="center" valign="top"><p>
            <input id="Reset1" style="vertical-align: middle; text-align: center" type="reset"
                        value="Reset Calculator" onclick="ClearFields();"/>
            </p>
              <blockquote>
                <blockquote>
                  <blockquote>
                    <blockquote>
                      <blockquote>
                        <p align="center" class="style11">PLEASE NOTE<br />
                        This calculator is for illustration purposes only and to make a meaningful comparison, assumes 100% utlization of resources 100% of the time. </p>
                      </blockquote>
                    </blockquote>
                  </blockquote>
                </blockquote>
            </blockquote></td>
          </tr>
        </tbody>
    </table></td>
  </tr>
</div>	
</body
</html>	
	